AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /learnings:
            get:
              responses: {}
            post:
              responses: {}
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - '*'
  CreateNewLearningFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateNewLearningFuncti
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateNewLearningFunction
      CodeUri: src/CreateNewLearningFunction
      Handler: handler.handle
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LearningsTable
      Events:
        HttpApiPOSTlearnings:
          Type: HttpApi
          Properties:
            Path: /learnings
            Method: POST
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          TABLE_NAME: !Ref LearningsTable
          TABLE_ARN: !GetAtt LearningsTable.Arn
  LearningsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  SlackNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SlackNotificationFuncti
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SlackNotificationFunction
      CodeUri: src/SlackNotificationFunction
      Handler: handler.handle
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        LearningsTable:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt LearningsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  GetAllLearningsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetAllLearningsFunction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAllLearningsFunction
      CodeUri: src/GetAllLearningsFunction
      Handler: handler.handle
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LearningsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref LearningsTable
          TABLE_ARN: !GetAtt LearningsTable.Arn
      Events:
        HttpApiGETlearnings:
          Type: HttpApi
          Properties:
            Path: /learnings
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      ReservedConcurrentExecutions: 2
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)